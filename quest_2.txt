- regular number
- haming number
- hamming distance
- resevoir sampling
- mpirun -np 4 ./output ==> run output on 4 procs
- given an array of numbers, find all combination whose sum is equal to a given number
- given a text and a word, find out if text contains any anagram of word
- Write a function to determine if a number is strobogrammatic. The number is represented as a string.  For example, the numbers "69", "88", and "818" are all strobogrammatic
- Given a string of symbols with no delimiters between letters, and a lookup table to translate symbol sequences into letters, write code to determine all possible interpretations of the string.
- . O(log n) tome to find the k-th largest element of two pre-sorted array.
- O(n*log n) time to find the k-th largest element of a n*n matrix, given every row or column of the matrix is pre-sorted.
- search a heap with recursion (what's a heap?)
- implement fill color (ie., color all adjacent nodes of the same color until edge is met
- Given a string s, find the minimum cuts that partition s into substrings which are all palindrome
- How to read last 100 lines in billion lines file where each line has different length?
- Given a bunch of points and a convex polygon in R^2. Determine if each point is inside the polygon.
- kd tree - find all point within range
- sum3 problem
- Famous palentir waterfall question vsriation
- Given a binary search tree where there may contain duplicates, but all other logic of the BST is intact, determine the most frequently occurring element.
- timewindow :
Main question: Consider an interface which has the following two methods:

interface Counter {
  void inc();
    int getLastMinuteCount();
    }

The method inc() is supposed to help keep track of the number of requests that clients make to a server (or something else along those lines). The getLastMinuteCount() is supposed to return the number of requests that the server has received in the last minute. The question is to implement a class that has these two methods included.

- Given an array of integers, write a method that places all the zeros at the end.
- bit manipulations (power of 2?, xor, or, et)
- what happened when collisions in hashmap/table occurs: - we have 10 billion files on a   system out of which some are defective. Let&amp;#039;s say we can easily tell if a file is defective by its name (you don&amp;#039;t have to scan the content let&amp;#039;s say there is a blackbox API can can give you true or false result for an individual file). Design and implement a program that can provide the most frequently occurring defective files. You can assume file names are unique. You may not assume the number of duplicates is small
- map-reduce
- Only one programming questions. Input a string, including numbers, operands, and brackets. Calculate the result.  Test case: input: "(+ 3 3)": Output: 6 input "(* 3 3)" Output: 9 input: "(+ 1 12 (- 17 3) 5 (* 2 8 (/ 120 4)) 46)", Output: 1 + 12 + (17 - 3) + 5 + (2 * 8 * (120 / 4)) + 46 = 558
- Given an array of numbers, find all combinations of two numbers whose sum is a given number n.
-Linked List, Recursion, Sorting, Search, Dynamic programming
- Sorting multi-dimensional arrays. How would you 2-sort vertically and horizontally arrays
- there is n+1 loading docks. a permutation of boxes 1->n is placed on the first n. there is a fork that can move one box to an empty location at a time. Give an algorithm to sort the boxes with minimum number of moves. Follow up: minimum distance
----------- basis concepts --------
- suffix/prefix tree
- graph algos:prim,  disjstra, bfs, dfs
- generate maze (dfs???_)
- sort: quick, merge,countsort
- generated weighted randoms
- 
-------- previously seen ------
- print by levels
- print perimeter of a tree (top, down on left edge, across then back on right edge)
- fill-colors
- lca , with and without parent pointer. (when there IS a parent, there is NO root pointer)
- <something about binary searc/sum ...> an array of ints, sorted, with dups, find a target k? or find the most frequent elements in logn (not the usual O(n) approach). have to rely on the fact that dups are next to one another ....

- generate random number max k, given a random bit func
- generate a maze
-------- things to brag aboug --------

- sanitize db to reduce code gen
- track which expression caused an exception (custom debug agent)
  + line number table:
    line x : y
      x: line in source
      y: start offset in bytecode
- lcoated unparser for debugging (use THrowab(), grep the first stack entry)
- Throwable creation() for tracing obj orignation
  + hack by providing our own java.lang.Object class impl (code is public)
    . add our own Throwable creation = getCreation();
      the method return null by default
      or if a system prop is set, it'll return throwable for a specific class
  + install the "hacked" objects by prepending the source to bootclasspath:
     -Xbootclasspath/p:. ("/p" means to PREPEND)
     (http://www.javaspecialists.eu/archive/Issue038a.html    )
OB
